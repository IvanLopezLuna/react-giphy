{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","console","log","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAErB,IADHC,EACE,EADFA,cACE,EACkCC,mBAAS,IAD3C,mBACKC,EADL,KACiBC,EADjB,KAcF,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBc,SAAAP,GACtBF,EAAeE,EAAEQ,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAU,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QAVzB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KA0BxC,OApBAC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAX,GACFY,YAAW,WACPC,QAAQC,IAAId,GACZS,EAAS,CACLf,KAAMM,EACNO,SAAS,MAEd,UAEZ,CAAEpB,IASEqB,EDtB0BO,CAAc5B,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,WAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAK,OACb,cAAC,EAAD,eAESA,GADCA,EAAMC,aEZ3BkB,EAAe,WAAM,MAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAa9B,OAFAyC,QAAQC,IAAIG,GAGR,qCACI,8CACA,cAAC,EAAD,CAAa7C,cAAgBA,IAC7B,uBAGI6C,EAAWrB,KAAK,SAACT,EAAU+B,GAAX,OACZ,cAAC,EAAD,CAEI/B,SAAWA,GADLA,U,MCpB9BgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.21ea5f3d.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({\r\n    setCategories\r\n}) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = e => {\r\n        setInputValue( e.target.value )\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if ( inputValue.trim().length > 2 ){ // Validate that inputValue is major than 2 characters\r\n            setCategories( cats => [inputValue, ...cats] )\r\n            setInputValue('')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\" \r\n                value={ inputValue } \r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=viH2AF7zFldSJyBgBrV3X9TXqnEPOwCa`\r\n    const resp = await fetch(url)\r\n    // const data = await resp.json()\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map( image => {\r\n        return {\r\n            id: image.id,\r\n            title: image.title,\r\n            url: image.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    // console.log( {id, title, url} );\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data:images, loading } = useFetchGifs( category )\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            <div className=\"cardGrid\">\r\n                {\r\n                    images.map( image => (\r\n                        <GifGridItem\r\n                            key={ image.id }\r\n                            { ...image }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then(images => {\r\n                setTimeout(() => {\r\n                    console.log(images);\r\n                    setState({\r\n                        data: images,\r\n                        loading: false\r\n                    })\r\n                }, 500);\r\n            })\r\n    }, [ category ])\r\n    \r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state\r\n}","import React, { useState } from 'react'\r\n\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    /* const handledAdd = () => {\r\n        // We have to return a new array in the state, not modify the current state\r\n        // setCategories( [...categories, 'HunterXHunter'] )\r\n        // || OR\r\n        // setCategories( cats => [...categories, 'HunterXHunter'] )\r\n\r\n    } */\r\n    console.log(categories);\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            {\r\n                categories.map( (category, i) => (\r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category }\r\n                    />\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}